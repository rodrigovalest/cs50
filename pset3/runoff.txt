RUNOFF = segundo turno

Eleitor pode votar em mais de um candidato

Cada eleitor deve rankear e votar de acordo com suas preferências

Se algum candidato tiver mais de 50% dos votos (maioria) como primeira opção de voto, ganha automaticamente

Se não tiver algum candidato com mais de 50% dos votos, elimina o com o menor número de votos, pega a segunda opção de quem havia votado nele e considera como primeira, e refaz a eleição. 
Repete esse processo até que alguém ganhe a eleição
Caso em alguma repetição desse processo, a 2ª, 3ª, 4ª,... opção seja alguém que já tenha sido eliminado, considerar e pular para a próxima opção



-------------------------------------------------------------------

data structure:

name (string), votes (int), eliminated (boolean)


armazenar os candidatos em uma array
candidate candidates[MAX_CANDIDATES];


eleitores:
int preference[MAX_VOTERS][MAX_CANDIDATES]

preference[0][0] = 2
eleitor [0] votando como preferência [0] no candidato (= 2)

preference[1][1] = 0
eleitor [1] votando como preferência [1] no candidato (= 0)

-------------------------------------------------------------------

- Pedir todos os votos em ordem (get_string)
- Comparar se o voto foi validado (corresponde o vote com o candidates[i].name) com o votes() -> caso retorne true, atualizar a tabela da preferences  

-------------------------------------------------------------------

FUNCTIONS
- vote
- tabulate
- print_winner
- find_min
- is_tie
- eliminate


bool vote(int voter, int rank, string name)
{
	int vote -> qual eleitor está votando no momento
	int rank -> qual a preferência de voto que o eleitor está indicando
	string name -> qual candidato ele quer votar

	olhar para o candidato chamado nome

	se ele for encontrado, atualizar a preferences and return true

	se não for encontrado, return false


	**basicamente atualizar a tabela bidimensional da preferences (altera a array)
}


void tabulate()
{
	Atualizar a contagem de votos para todos os candidatos que não foram eliminados -> atualizar na data structure (candidates[i].votes)

	Caso candidates[i].eliminated = true, contar a próxima preferências de voto até que candidates[i].eliminated seja = false.

	**Fazer isso sempre atualizando a candidates[i].votes
}

bool print_winner(void)
{
	se algum candidato tiver mais da metade dos votos, print o nome e return true

	se ninguém tiver ganho por maioridade, return false
}

int find_min(void)
{
	return o número mínimo de votos para alguém se manter na eleição

	isto é, se ninguém tiver ganho por maioridade, pegar o menor número de votos que algum candidato teve e considerar ele como a "nota de corte" dos candidatos

	se candidates[i].eliminated = true, não considerar o valor dele como mínimo para eliminar alguém
}

bool is_tie(int min)
{
	decidir se existe algum empate entre os candidatos restantes

	número mínimo de votos (calculado no find_min) -> "nota de corte"

	return true se estiver empatada entre os candidatos restantes e return false caso contrário

	não considerar os votos dos candidatos já eliminados

	**ex: todos os candidatos tem 2 votos (não tem mais o que fazer, o ciclo para criar um turno novo não funcionará pois não tem ninguém que foi eliminado)
}

void eliminate(int min)
{
	eliminar quem continua no turno (candidates[i].eliminated = false) e que tem o número minimo de votos (calculado no find_min)

	pode eliminar mais de um candidato

	atualizar o candidates[i].eliminated
}


-------------------------------------------------------------------

pegar os nomes dos candidatos ao lado da linha de comando (./runoff Adam Bryan Cecília)



































